1:概述
=================================================
URL前缀：http://www.shianca.com:9009/
HTTP-REST风格的请求
	GET：用来获取资源；
	POST：用来新建资源；返回HTTP 状态201 表示创建成功。
	PUT：用来更新资源，完全覆盖；
	PATCH：用来更新资源，局部更新，部分覆盖；
	DELETE：用来删除资源；返回HTTP 状态204 表示执行成功。
	
REST请求的前缀都是/rest，以此开头的请求严格遵循REST风格规定。
其他请求的的前缀是/api，以此开头的请求并不要求严格遵守REST风格，按接口定义。
所有接口同时支持JSON和JSONP方式。
/rest接口的的说明地址：/rest/browser/index.html#/rest/，用浏览器打开http://www.shianca.com:9009/rest/browser/index.html#/rest/查看。

/api前缀接口如果没有特殊指明，同时支持GET和PUT方式，通用的返回格式是：
	{
	    "code": 0,
	    "msg": "success",
	    "data": "食安云台的介绍"
	}
	code 为0表示成功，其他为失败；
	msg 是code说明。
	data 是返回的数据，可以是字符串、数组、json结构。
以下接口说明，参数以{}形式标注

2:接口
==================================================
	
	1:）获得网站标题
	GET /api/getSiteTitle
	{
		"code": 0,
		"msg": "success",
		"data": "翡翠湾食安云台"
	}
	
	2:）获得网站简介
	GET /api/getSiteInfo
	{
	    "code": 0,
	    "msg": "success",
	    "data": "食安云台的介绍"
	}
	
	3:）获得网站Logo
	GET /api/getSiteLogo
	{
	    "code": 0,
	    "msg": "success",
	    "data": "logo的url地址"
	}
	
	4:）网站基本信息接口。上面三个接口可以统一为这一个
	GET /rest/siteConfigs/0
	{
	    "ctime": "2018-01-19 16:44:06",
	    "title": "翡翠湾",
	    "info": "介绍",
	    "logo": "hhhh",
	    "copyright": "hhhhhh",
	    "formatCtime": "2018-01-19 16:44",
	    "_links": {
	        "self": {
	            "href": "http://127.0.0.1:9009/rest/siteConfigs/0"
	        },
	        "siteConfig": {
	            "href": "http://127.0.0.1:9009/rest/siteConfigs/0"
	        }
	    }
	}
	
	5:）修改网站信息
	PATCH /rest/siteConfigs/0
	{
		"title":"翡翠湾",
		"info":"介绍",
		"logo":"网站logo",//logo可以用第6个接口上传，修改时填第6个接口返回的location字段值
		"copyright":"hhhhhh"
	}
	只需要提交修改过的字段，如：
	{
		"title":"翡翠湾"
	}
	
	6:）文件上传接口
	POST /api/asset/upload
	multipart/form-data方式上传，参数名为：file
	返回内容为：
{
    "code": 0,
    "msg": "success",
    "data": {
        "id": 27,
        "ctime": "2018-01-20 07:52:53",
        "title": "view2", //文件标题
        "location": "201801/20180120081011.jpeg",//文件在服务器名称
        "createFrom": null,
        "type": "IMG",//文件类型
        "tags": null,
        "sourceName": "view2.jpeg",//原始名称
        "open": true,
        "wxUser": null,
        "tagLables": [],
        "formatCtime": "2018-01-20 07:52"
    }
}

	7:）文件查看接口
	GET /api/asset/preview?fileName={fileName}&size={size}
	fileName值取上传文件接口返回内容中的location字段，size专为图片文件用，medium表示中等大小（430X430），small表示小尺寸（215X215），不填则表示原图大小
	返回：以流的方式返回文件
	
	8:）微信用户点击链接进入公众号
	GET /api/wp/auth
	后台会验证微信用户身份，获得openId，并保存在cookie里，然后重定向到公众号首页或个人首页，并携带参数：openId,如
		http://www.shianca.com/userIndex.html?openId=o6AWbjnhuD5ZZSeMpp3hVF7ArF6U
	此时页面可以从cookie或者请求参数里获得openId，后续场景根据需要传送。
	
	9:）根据openId获得用户信息
	GET /rest/users/search/openId?openId={openId}
	如：/rest/users/search/openId?openId=o6AWbjpi4e7MRmXP4qYQpN5zSoIM
		{
		  "ctime": "2017-12-07 10:36:53",
		  "email": "1@1.com",
		  "loginType": 4, //'登录类型，1:手机号码，2：邮箱，3：自定义用户名',4:微信
		  "password": null,
		  "name": "张军1111",
		  "nickname": null,
		  "sex": null,
		  "age": null,
		  "level": 0,//'0-普通用户，1：份额用户,2：股东用户',
		  "phone": "12444",
		  "origin": "wechat",//用户来源，web：网站注册，wechat：微信关注
		  "lastLogin": null,
		  "active": true,
		  "verified": false,//审核状态，true：审核通过
		  "selfIntro": "普通用户",
		  "selfDescription": "张军1111",
		  "originDesc": "网站注册",
		  "verifiedDesc": "待审核",
		  "activeDesc": "正常",
		  "levelDesc": "普通用户",
		  "sexDesc": null,
		  "add": false,
		  "formatCtime": "2017-12-07 10:36",
		  "_links": {
		    "self": {
		      "href": "http://localhost:9009/rest/users/7"
		    },
		    "user": {
		      "href": "http://localhost:9009/rest/users/7"
		    },
		    "wxUser": {
		      "href": "http://localhost:9009/rest/users/7/wxUser"
		    },
		    "addresses": {
		      "href": "http://localhost:9009/rest/users/7/addresses"
		    },
		    "products": {
		      "href": "http://localhost:9009/rest/users/7/products"
		    }
		  }
		}
	
	10:）更新用户信息
	PATCH {url}
	注意，此处的url从上一步json结构的属性_links->self->href读出值，如http://localhost:9009/rest/users/7
	提交body：
	{
		  "email": "9600348@qq.com",
		  "name": "张军",
		  "nickname": "昵称",
		  "age": 123,
		  "phone": "13311032007"
		}
		
	11:）获得用户地址列表
	GET {url}
	此处的url从上一步json结构的属性_links->addresses->href读出值
	{
	  "_embedded": {
	    "addresses": [
	      {
	        "id": 12,
	        "ctime": "2018-01-17 23:49:26",
	        "consignee": "收货人",
	        "phone": "手机号码",
	        "postAddress": "收货地址",
	        "city": "城市bb",
	        "region": "区域cc",
	        "tag": "标记，家庭或公司等",
	        "default": false,//是否缺省地址
	        "formatCtime": "2018-01-17 23:49",
	        "_links": {
	          "self": {
	            "href": "http://localhost:9009/rest/addresses/12"
	          },
	          "address": {
	            "href": "http://localhost:9009/rest/addresses/12"
	          },
	          "user": {
	            "href": "http://localhost:9009/rest/addresses/12/user"
	          }
	        }
	      }
	    ]
	  },
	  "_links": {
	    "self": {
	      "href": "http://localhost:9009/rest/users/7/addresses"
	    }
	  }
	}
	
	12:）添加地址
	POST /rest/addresses/
	{
	"user":"http://localhost:9009/rest/users/7",
	"consignee":"收货人",
	"phone":"手机号码",
	"postAddress":"收货地址",
	"city":"城市",
	"region":"区域cc",
	"tag":"标记，家庭或公司等",
	"default":0
	}
	
	13:）修改地址
	PATCH {url}
	此处的url从地址列表json结构的属性_links->self->href读出值，如http://localhost:9009/rest/addresses/7
	{
	"consignee":"收货人",
	"phone":"手机号码",
	"postAddress":"收货地址",
	"city":"城市",
	"region":"区域cc",
	"tag":"标记，家庭或公司等",
	"default":0
	}
	
	14:）删除地址
	DELETE {url}
	
	15:) 充值
	GET或POST  /api/pay/mpCreateOrder?openId={openId}&fee={fee}
	openId:微信openId
	fee：充值金额，以分为单位
	返回内容：
	{
	    "code": 0,
	    "msg": "SUCCESS",
	    "data": {
	        "appId": "wx7a058c81272e3cef",
	        "timeStamp": "1519627099",
	        "nonceStr": "1519627099572",
	        "packageValue": "prepay_id=wx20180226143816b1a8683c3b0815777358",
	        "signType": "MD5",
	        "paySign": "2E4A6A17D86FF1457CEA2C04738EBED8"
	    }
	}
	16:）微信支付
	参考：https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&index=6
	根据上一步返回的参数调用微信支付接口
	
	
	
	
	